name: Deploy Production Stack with Terraform

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out your repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # 2. Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      # 3. Install Terraform
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2

      # 4. Build and Zip Your Lambda Functions
      - name: Build Lambda code
        run: |
          chmod +x ./bin/bash/build_functions.sh
          ./bin/bash/build_functions.sh

      # 5. Auto-generate .tf resources (Python script)
      - name: Generate Terraform config
        run: |
          cd terraform
          python auto_update_terraform.py

      # 6. Initialize Terraform
      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      # 7. Check & Import IAM Role if it Already Exists
      - name: Check & Import IAM Role
        run: |
          cd terraform
          set +e
          ROLE_NAME="lambda-exec-role-prod"
          echo "Checking if role $ROLE_NAME exists..."
          aws iam get-role --role-name "$ROLE_NAME"
          EXISTS=$?

          if [ $EXISTS -eq 0 ]; then
            echo "Role $ROLE_NAME already exists. Importing into Terraform..."
            terraform import aws_iam_role.lambda_exec_role "$ROLE_NAME" || true
          else
            echo "Role $ROLE_NAME does not exist. Terraform will create it."
          fi
          set -e

      # 8. Plan and Apply Terraform for Production
      - name: Terraform Plan & Apply
        run: |
          cd terraform
          terraform plan -var="feature_name=prod" -out=tfplan
          terraform apply -auto-approve tfplan
